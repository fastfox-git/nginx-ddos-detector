<?php

/**
 * DDoS Detector for Nginx/Apache
 *
 * @see https://fastfox.pro/
 *
 * @copyright Copyright (c) FastFox LLC
 * @license https://github.com/fastfox-git/nginx-ddos-detector/blob/main/LICENSE
 */

// –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤. –ü—Ä–∏ –∑–∞–º–µ–Ω–µ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª–µ blackhole.conf –∏ logs.conf
const BASEDIR = '/ngx/';

// –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
const SERVER = '–°–µ—Ä–≤–µ—Ä: FF-RU-ISP1';

// –ß–∏—Å–ª–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ Nginx –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Å–∞–π—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
const CONNECT = 5000;

// –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ —Å–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
const BAN_SIZE = 1242880;

// –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ —Å–∞–π—Ç –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
const UNBAN_SIZE = 80800;

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–π—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
const MIN_ATTACK_TIME = 119;

// –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
const FILE_PATH = '/root/ddosdetector';

// –ü—É—Ç—å –¥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤. –í —ç—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ —Å–∫—Ä–∏–ø—Ç –∏—â–µ—Ç –ª–æ–≥–∏–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–π—Ç–∞
const PATH_VHOSTS = '/etc/nginx/vhosts/';

// –ü—É—Ç—å –¥–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤. –í–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–∞–ø–∫–∏ —Å–∞–π—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—â–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
const PATH_VHOSTS_RESOURCES = '/etc/nginx/vhosts-resources/';

// –í —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª logs.conf –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤.
const PATH_VHOSTS_INCLUDES = '/etc/nginx/vhosts-includes/';

// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç true/false. –í–∫–ª—é—á–∞–µ—Ç –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Ñ–∞–π–ª ddos.log
const DEBUG = true;

// –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
$WHITE_LIST = array('localhost', 'site.ru');

// Telegram Nofications Settings
// Bot token
const TG_BOT_TOKEN = ''; // For example 5128034826:AEAn0u0XKZCUrFwf_ZWknUUhdNsLjtXUQOA
const TG_CHAT_ID = ''; // For example -1001332541951
 

// Security
if (count(array_intersect([' ', '', '/'], [BASEDIR, FILE_PATH]))) {
    log_ddos('–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö');
    return -1;
}

// Go WORK

$starttime = microtime(true);

$bannedSitesContent = file_get_contents(FILE_PATH . '/bannedSites.txt');
if (!$bannedSitesContent) {
    $bannedSitesContent = "[]";
}
$bannedSites = json_decode($bannedSitesContent, true);
$connections = `netstat -ant | grep -E ':80|:443' | wc -l`;
//unban
$unbanned = 0;
foreach ($bannedSites as $file => $time) {

    if (filesize(BASEDIR . $file . '.access.log') < UNBAN_SIZE
        && (microtime(true) - $time > MIN_ATTACK_TIME)) {

            $text = "üü¢ <b>–ê—Ç–∞–∫–∞ –Ω–∞ —Å–∞–π—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞</b>\n";
            $text .= "–°–∞–π—Ç " . $file . " —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
            sendMessage(urlencode($text));

            unlink(PATH_VHOSTS_RESOURCES . $file . '/blackhole.conf');
            unset($bannedSites[$file]);

            log_ddos(' - unban: ' . $file . ' size: ' . filesize(BASEDIR . $file . '.access.log'));
            $unbanned++;
            exec('truncate -s 0 ' . BASEDIR . $file . '.access.log');


    } else {
        log_ddos(' > ' . $file . ' –ù–µ –º–æ–∂–µ–º —Ä–∞–∑–±–∞–Ω–∏—Ç—å. –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ ' .
            (microtime(true) - $time) . '—Å–µ–∫. –†–∞–∑–º–µ—Ä –ª–æ–≥–∞: : ' .
            filesize(BASEDIR . $file . '.access.log'));

        if (!is_file(FILE_PATH . '/attack_started!')) {
            exec('truncate -s 0 ' . BASEDIR . $file . '.access.log');
        }
    }


}
if ($unbanned > 0) {
    `service nginx reload`;
    if (!is_file(FILE_PATH . '/attack_started!') && count($bannedSites) == 0) {
        exec('rm -f '.PATH_VHOSTS_INCLUDES.'logs.conf');

        if (!in_array(BASEDIR, ['', '/'])) {
            exec('find ' . BASEDIR . ' -type f -exec rm -f {}\;');
        }
    }

}


//ban if lots of connections

log_ddos('! connections: ' . trim($connections));
if ($connections >= CONNECT) {

    if (!is_file(FILE_PATH . '/attack_started!')) {

        $text = "‚ÄºÔ∏è <b>–ù–∞—á–∞–ª–∞—Å—å –∞—Ç–∞–∫–∞</b>\n";
        $text .= "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " . trim($connections) . "\n";
        $text .= "–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–≥–æ –∏–¥–µ—Ç –∞—Ç–∞–∫–∞";
        sendMessage(urlencode($text));

        exec('touch ' . FILE_PATH . '/attack_started!');
        if (!in_array(BASEDIR, ['', '/'])) {
            exec('find ' . BASEDIR . ' -type f -exec truncate --size 0 {} \;');
        }
        copy(FILE_PATH . '/logs.conf',
            PATH_VHOSTS_INCLUDES.'logs.conf');
        `service nginx reload`;

    } else {
        $banned = 0;
        $files = scandir(BASEDIR);
        $accessFiles = [];
        foreach ($files as $file) {
            if (preg_match('/([^"]+)access\.log/', $file)) {
                $accessFiles[] = $file;
            }
        }
        foreach ($accessFiles as $file) {
            if (filesize(BASEDIR . $file) >= BAN_SIZE) {
                $siteDir = explode(".access.log", $file)[0];

                if (!in_array($siteDir, $WHITE_LIST)) {
                    if (in_array($siteDir, array_keys($bannedSites))) {
                        if (!is_file(PATH_VHOSTS_RESOURCES . $siteDir . '/blackhole.conf')) {
                            log_ddos('recopy ban file to ' . $siteDir);
                            copy(FILE_PATH . '/blackhole.conf',
                                PATH_VHOSTS_RESOURCES
                                . $siteDir . '/blackhole.conf');
                            `service nginx reload`;
                        }
                    } else {

                        if(PATH_VHOSTS){
                        $userSiteFile = exec('find '.PATH_VHOSTS.'*/ -name ' . $siteDir . '.conf');
                        $userSiteFileParts = explode('/', $userSiteFile);
                        $user = $userSiteFileParts[count($userSiteFileParts) - 2];
                        }else{
                            $user = 'nouser';
                        }

                        if (is_dir(PATH_VHOSTS_RESOURCES . $siteDir)) {

                            $text = "üîçÔ∏è <b>–¶–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞</b>\n";
                            $text .= "–ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∞–π—Ç: " . $siteDir;
                            sendMessage(urlencode($text));

                            log_ddos( ' + ban: ' . $siteDir . ' size: ' . filesize(BASEDIR
                                    . $file) . " uzver: " . $user);
                            copy(FILE_PATH . '/blackhole.conf',
                                PATH_VHOSTS_RESOURCES
                                . $siteDir . '/blackhole.conf');

                            $bannedSites[$siteDir] = microtime(true);
                            $banned++;
                        } else {
                            $text = "‚ùìÔ∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n";
                            $text .= "–ê—Ç–∞–∫—É—é—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å: " . $siteDir;
                            sendMessage(urlencode($text));

                            file_put_contents(FILE_PATH . '/error_ddos.log', date("Y-m-d H:i:s") . ' cannot ban: ' .
                                $siteDir . ' size: ' . filesize
                                (BASEDIR . $file) . " uzver: " . $user->name . "\n", FILE_APPEND);

                        }
                    }

                }

            }
        }

        if ($banned > 0) {

            `service nginx reload`;

        }
        if (!in_array(BASEDIR, ['', '/'])) {
            exec('find ' . BASEDIR . ' -type f -exec truncate --size 0 {} \;');
        }

    }

} else {
    if (is_file(FILE_PATH . '/attack_started!')) {

        if (!in_array(BASEDIR, ['', '/'])) {
            exec('find ' . BASEDIR . ' -type f -exec truncate --size 0 {} \;');
        }
        if (!in_array(FILE_PATH, ['', '/'])) {
            exec('rm -f ' . FILE_PATH . '/attack_started!');
        }


        if (count($bannedSites) == 0) {
            exec('rm -f '.PATH_VHOSTS_INCLUDES.'logs.conf');
            `service nginx reload`;

            if (!in_array(BASEDIR, ['', '/'])) {
                exec('find ' . BASEDIR . ' -type f -exec rm -f {}\;');
            }

        }
        $text = "‚úÖ <b>–ê—Ç–∞–∫–∞ –æ—Ç–±–∏—Ç–∞</b>\n";
        $text .= "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: " . trim($connections);
        sendMessage(urlencode($text));
    }


}

file_put_contents(FILE_PATH . '/bannedSites.txt', json_encode($bannedSites));

$endtime = microtime(true);
$timediff = $endtime - $starttime;
log_ddos('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ' . $timediff . "\n");

function sendMessage($text)
{
    if(TG_BOT_TOKEN && TG_CHAT_ID){
        $ch = curl_init("https://api.telegram.org/bot".TG_BOT_TOKEN."/sendMessage?chat_id=".TG_CHAT_ID."&parse_mode=html&text=" . $text . urlencode("\n\n" . SERVER));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        echo curl_exec($ch);
        echo "\n";
    
        curl_close($ch);
        return $ch;
    }
}

function log_ddos($msg)
{
    if(DEBUG){
        file_put_contents(FILE_PATH . '/ddos.log', date("Y-m-d H:i:s") . ' ' . $msg . "\n", FILE_APPEND);
    }
}

